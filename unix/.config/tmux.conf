###############
# Keybindings #
###############

# Prefix key
unbind C-b  
unbind-key b
unbind Space
unbind-key Space
set -g prefix2 C-Space
#set -g prefix  C-q 

# Vim-like movement 
unbind-key h
unbind-key j
unbind-key k
unbind-key l
bind-key h select-pane -L
bind-key j select-pane -D 
bind-key k select-pane -U
bind-key l select-pane -R
unbind-key p
unbind-key n
bind-key p select-window -p
bind-key n select-window -n
bind-key H run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -L; tmux swap-pane -t $old'
bind-key J run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -D; tmux swap-pane -t $old'
bind-key K run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -U; tmux swap-pane -t $old'
bind-key L run-shell 'old=`tmux display -p "#{pane_index}"`; tmux select-pane -R; tmux swap-pane -t $old'

# Vim-like splits
unbind-key s
unbind-key v
bind-key s split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"

unbind-key Up
unbind-key Down
unbind-key Left
unbind-key Right
bind-key -r Up resize-pane -U 5
bind-key -r Down resize-pane -D 5
bind-key -r Left resize-pane -L 5
bind-key -r Right resize-pane -R 5

# Zoom in, zoom out
unbind-key f
bind-key f resize-pane -Z
# Fast detach
unbind-key z
bind-key z detach


#bind-key '<' swap-window -d -t '{previous}' # Move window left.
#bind-key '>' swap-window -d -t '{next}' # Move window right.


#################
# Mousebindings #
#################

# For selecting and resizing things
set -g mouse on

# Stay in copy mode on drag end.
# (Would use `bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X
# stop-selection` but it is a bit glitchy.)
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Scroll 3 lines at a time instead of default 5; don't extend dragged selections.
bind-key -T copy-mode-vi WheelUpPane select-pane\; send-keys -t'{mouse}' -X clear-selection\; send-keys -t'{mouse}' -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane\; send-keys -t'{mouse}' -X clear-selection\; send-keys -t'{mouse}' -X -N 3 scroll-down

# Make double and triple click work outside of copy mode (already works inside it with default bindings).
bind-key -T root DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind-key -T root TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"

# Don't exit copy mode on double or triple click.
bind-key -T copy-mode-vi DoubleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-word"
bind-key -T copy-mode-vi TripleClick1Pane if-shell -Ft'{mouse}' '#{alternate_on}' "send-keys -M" "copy-mode -t'{mouse}'; send-keys -t'{mouse}' -X select-line"

# For those times when C-c and q are not enough.
bind-key -T copy-mode-vi Escape send-keys -X cancel


#############
# Behaviour #
#############

# More history
set-option -g history-limit 10000

# Do not wait for an escape key.
set -g escape-time 0

# No beeps, no blinks
# NOTE: Remove?
set-option -g bell-action none

# Dijkstra was wrong
set -g base-index 1
set -g pane-base-index 1

# Automatically renumber window numbers on closing a pane (tmux >= 1.7).
set-option -g renumber-windows on

# Open new windows in current path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# If window does not exist, create it.
bind-key 0 if-shell 'tmux select-window -t :0' '' 'new-window -t :0'
bind-key 1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind-key 2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind-key 3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind-key 4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
bind-key 5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
bind-key 6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
bind-key 7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
bind-key 8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
bind-key 9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'


# Default is login shells that are slower for some reason.
# If you are on a MacOS, login shell are the default, so I left them there so I do not mess up
# https://apple.stackexchange.com/questions/12993/why-doesnt-bashrc-run-automatically
# NOTE: Maybe this is fixed already. I do not know.
if-shell 'test $(uname) != "Darwin"' 'set -g default-command "$SHELL"'



# copy-mode in vim mode? Why not just vim? FIXME: This is actually quite insecure + change -S to - in v 2.0 + $EDITOR not vim, and this does not work
#bind-key v capture-pane -S -32768\; save-buffer /tmp/tmux_buffer.txt\; delete-buffer\; send-keys c-a c-k ' vim -c "+normal G{}0" /tmp/tmux_buffer.txt; rm /tmp/tmux_buffer.txt' c-m \;
#bind-key v capture-pane -S -32768\; save-buffer "$TMPDIR/tmux_pane.#{pane_id}"\; delete-buffer\; send-keys c-a c-k ' vim -c "+normal G{}0" "$TMPDIR/tmux_pane.#{pane_id}"; rm "$TMPDIR/tmux_pane.#{pane_id}"' c-m \;

#bind-key v capture-pane -S -32768\; run " tmux save-buffer - > $TMPDIR/tmux_pane.#{pane_id}"\; delete-buffer\; send-keys c-a c-k ' vim -c "+normal G{}0" "$TMPDIR/tmux_pane.#{pane_id}"; rm "$TMPDIR/tmux_pane.#{pane_id}"' c-m \;
# NOTE: Alternative, use a clip manager
# 1
# Clipper.
#bind-key y run-shell "tmux save-buffer - | nc -U ~/.clipper.sock"
# "copy-pipe" requires tmux >= 1.8
#bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "nc -U ~/.clipper.sock"
# 2
#bind-key -T copy-mode-vi 'v' send -X begin-selection
#bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# 3 
#bind-key -T copy-mode-vi 'v' send -X begin-selection
#    bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-
#    cancel 'xclip -in -selection clipboard'
# 4
#    bind -Tcopy-mode-vi MouseDragEnd1Pane copy-pipe-and-cancel "if [ \"$(uname)\" = 'Darwin' ]; then pbcopy; else xclip; fi"
# 5
# https://news.ycombinator.com/item?id=23004762
# 6
# set -s set-clipboard external
# 7
# https://github.com/hujun-open/rclip
# 8
# Piknik
# 9
# https://github.com/tmux-plugins/tmux-yank
# 10
# https://github.com/tmux/tmux/wiki/Clipboard


#unbind-key [
# VI copy mode
#setw -g mode-keys vi
#bind-key -T copy-mode-vi 'v' send -X begin-selection
#bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel




# NOTE: Check out these.
# Stolen from: https://github.com/wincent/wincent/blob/81e4b5dc180dd22d8b4764439a08d050e4d02e61/aspects/dotfiles/files/.tmux.conf 
#bind-key p select-layout -o
#set-option -w -g xterm-keys on
# set-option -g set-titles-string "#S > #T"
# bind-key C-l clear-history
# source-file -q ~/.tmux-local.conf
# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
#set-option -g focus-events on
# But don't change tmux's own window titles.
#set-option -w -g automatic-rename off
#
#set-option -ga terminal-overrides ',xterm-256color:Tc'
# Needed as on tmux 1.9 and up (defaults to off).
# Added in tmux commit c7a121cfc0137c907b7bfb.
# set-option -g focus-events on
# Make sure we always start at 1, even when invoked from a .tmux wrapper script.
# set-environment -g SHLVL 1
# Add : to the default list (" -_@") of word separators.
# set-option -ga word-separators :/
# Search back to last prompt (mnemonic: "[b]ack").
# bind-key b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "โฏ"\; send-keys -X next-word
#
#bind-key -T copy-mode-vi / command-prompt -i -p "search down" "send -X search-forward-incremental \"%%%\""
#bind-key -T copy-mode-vi ? command-prompt -i -p "search up" "send -X search-backward-incremental \"%%%\""



#########
# Theme #
#########

# Use 256 colors by default
set-option -g default-terminal "tmux-256color"

# Tailored for a 79 + 1 vim layout
set-option -w -g main-pane-width 85

# Highlight active window.
set-option -w -g window-status-current-style bg=red

# Status bar
set-option -g status-style 'bg=#373b41,fg=white,bold,italics'
set-option -g status-left-length 40
set-option -g status-left '#[fg=yellow,bold,italics]#S ยง ' # SECTION SIGN (UTF-8: c2 a7)
set-option -g status-right "#[fg=yellow,bold,italics]$USER@#h #[fg=magenta]%H:%M %Z %p"
set-option -g status-interval 60 # Default is 15.


# Update tabs and tiles in Tmux control mode.
set-option -g set-titles on
