#!/usr/bin/env python3
import argparse
import sqlite3
import pathlib
import csv
import sys
import io

from dataclasses import dataclass
from typing import Optional

# TODO: Add location, and maybe tags ands scheme
@dataclass
class Bookmark:
    title: str
    url: str
    keyword: Optional[str]

# from: https://wiki.mozilla.org/images/d/d5/Places.sqlite.schema3.pdf
def read_firefox_sqlite(path: pathlib.Path) -> list[Bookmark]:
    connection = sqlite3.connect(path)
    cursor = connection.cursor()
    query = cursor.execute('''
    select b.title, p.url, k.keyword
    from moz_bookmarks b
    left join moz_places p on b.fk = p.id
    left join moz_keywords k on k.place_id = p.id
    where p.url is not null
    ''')
    return [
        Bookmark(title, url, keyword)
        for title, url, keyword
        in query.fetchall()
    ]

def read_firefox_html(path: pathlib.Path) -> list[Bookmark]:
    raise NotImplementedError()

def find_sqlite_database() -> pathlib.Path:
    raise NotImplementedError()

parser = argparse.ArgumentParser()
# NOTE: Will be good to have Chrom{e,ium} and maybe Edge or Safari
parser.add_argument('-i', '--input', type=pathlib.Path, metavar='input_path', help='SQLite or HTML dump from Firefox')
parser.add_argument('-o', '--output', type=pathlib.Path, metavar='output_path', help='Where to output: Directory, file, or (by default) terminal')
# TODO: Add Elvi, and maybe Qutebrowser  formats
parser.add_argument('-t', '--to', type=str, choices=['csv', 'elvi'], default='csv', metavar='format_to', help='Format to output to ()')
args = parser.parse_args()


print(args)
input_path = args.input or find_sqlite_database()
output_path = args.output
format_to = args.to



match input_path.suffix:
    case '.sqlite':
        bookmarks = read_firefox_sqlite(input_path)
    case '.html':
        bookmarks = read_firefox_html(input_path)
    case suffix:
        raise NotImplementedError(f'Filetype "{suffix}" import not implemented')


match (format_to, output_path):
    case ('csv', _):
        csvfile = csv.writer(output_path or sys.stdout)
        csvfile.writerow(['title','url','keyword'])
        for bookmark in read_firefox_sqlite(input_path):
            csvfile.writerow([bookmark.title, bookmark.url, bookmark.keyword])
    case (_, None):
        raise NotImplementedError(f'Format {format_to} not implemented for the terminal')
    case _:
        raise NotImplementedError('Format not implemented')







#    os.makedirs(location, exist_ok=True)

#    xml = input_file.read().replace("<DT>", "").replace("<p>", "").replace("\n", "")
#
#    bookmarks = bs4.BeautifulSoup(xml, features="lxml").select_one("DL")

#    # Go through every child
#    for child in root.children:
#        if child.name == "dl":
#            process(child, os.path.join(location, folder_name))
#        elif child.name == "h3":
#            folder_name = child.contents[0]
#        elif child.name == "a":
#            title = child.contents[0] if child.contents else ""
#            href = child.attrs["href"]
#            url_file.write(f"# {title}\n{href}\n")
